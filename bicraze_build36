# bitcraze/builder:36
ADD file:3f673e2aa3a51c7980f0f25985b44578e091d31b3e0a8f481069c20b363a216c in / 
CMD ["bash"]
/bin/sh -c set -eux; 	apt-get update; 	apt-get install -y --no-install-recommends 		ca-certificates 		curl 		netbase 		wget 		tzdata 	; 	rm -rf /var/lib/apt/lists/*
/bin/sh -c set -ex; 	if ! command -v gpg > /dev/null; then 		apt-get update; 		apt-get install -y --no-install-recommends 			gnupg 			dirmngr 		; 		rm -rf /var/lib/apt/lists/*; 	fi
/bin/sh -c apt-get update && apt-get install -y --no-install-recommends 		git 		mercurial 		openssh-client 		subversion 				procps 	&& rm -rf /var/lib/apt/lists/*
/bin/sh -c set -ex; 	apt-get update; 	apt-get install -y --no-install-recommends 		autoconf 		automake 		bzip2 		dpkg-dev 		file 		g++ 		gcc 		imagemagick 		libbz2-dev 		libc6-dev 		libcurl4-openssl-dev 		libdb-dev 		libevent-dev 		libffi-dev 		libgdbm-dev 		libglib2.0-dev 		libgmp-dev 		libjpeg-dev 		libkrb5-dev 		liblzma-dev 		libmagickcore-dev 		libmagickwand-dev 		libmaxminddb-dev 		libncurses5-dev 		libncursesw5-dev 		libpng-dev 		libpq-dev 		libreadline-dev 		libsqlite3-dev 		libssl-dev 		libtool 		libwebp-dev 		libxml2-dev 		libxslt-dev 		libyaml-dev 		make 		patch 		unzip 		xz-utils 		zlib1g-dev 				$( 			if apt-cache show 'default-libmysqlclient-dev' 2>/dev/null | grep -q '^Version:'; then 				echo 'default-libmysqlclient-dev'; 			else 				echo 'libmysqlclient-dev'; 			fi 		) 	; 	rm -rf /var/lib/apt/lists/*
LABEL maintainer=Kristoffer Richardsson <kristoffer@bitcraze.io>
RUN /bin/sh -c dpkg --add-architecture i386 && apt-get update     && apt-get install -y --no-install-recommends 		telnet 		libncurses5:i386 		libusb-1.0-0 		zip unzip 		sdcc libftdi-dev 		python3-pip python3-wheel python3-dev python3-setuptools python-is-python3 		rake 		swig 		flex bison gperf 		python3-opencv 	&& rm -rf /var/lib/apt/lists/* # buildkit
RUN /bin/sh -c curl -fsSLO https://developer.arm.com/-/media/Files/downloads/gnu-rm/9-2020q2/gcc-arm-none-eabi-9-2020-q2-update-x86_64-linux.tar.bz2     && tar --strip-components=1 -xvjf gcc-arm-none-eabi-9-2020-q2-update-x86_64-linux.tar.bz2 -C /usr/local/ # buildkit
ENV DOCKER_VERSION=19.03.1
RUN /bin/sh -c curl -fsSLO https://download.docker.com/linux/static/stable/x86_64/docker-${DOCKER_VERSION}.tgz && tar --strip-components=1 -xvzf docker-${DOCKER_VERSION}.tgz -C /usr/local/bin # buildkit
RUN /bin/sh -c mkdir /new_home # buildkit
ENV HOME=/new_home
RUN /bin/sh -c pip3 install --upgrade pip # buildkit
RUN /bin/sh -c pip3 install numpy==1.20.2 scipy==1.7.1 flake8==3.8.4 pyusb==1.0.0b2 libusb-package==1.0.24.2 mock pyserial pre-commit tox opencv-python==4.5.1.48 pyelftools pytest # buildkit
ADD .pre-commit-config.yaml /dummy/.pre-commit-config.yaml # buildkit
RUN /bin/sh -c cd /dummy && git init && pre-commit run && cd && rm -rf /dummy # buildkit
RUN /bin/sh -c mkdir -p /new_home/esp # buildkit
RUN /bin/sh -c cd /new_home/esp && git clone --depth 1 --branch v4.3.1 --recursive https://github.com/espressif/esp-idf.git # buildkit
RUN /bin/sh -c cd /new_home/esp/esp-idf && python3 ./tools/idf_tools.py install # buildkit
ENV IDF_PATH=/new_home/esp/esp-idf
RUN /bin/sh -c cd /new_home/esp/esp-idf && pip3 install -r requirements.txt # buildkit
ENV PATH=/new_home/esp/esp-idf/components/esptool_py/esptool:/new_home/esp/esp-idf/components/espcoredump:/new_home/esp/esp-idf/components/partition_table:/new_home/esp/esp-idf/components/app_update:/new_home/.espressif/tools/xtensa-esp32-elf/esp-2021r1-8.4.0/xtensa-esp32-elf/bin:/new_home/.espressif/tools/xtensa-esp32s2-elf/esp-2021r1-8.4.0/xtensa-esp32s2-elf/bin:/new_home/.espressif/tools/xtensa-esp32s3-elf/esp-2021r1-8.4.0/xtensa-esp32s3-elf/bin:/new_home/.espressif/tools/riscv32-esp-elf/esp-2021r1-8.4.0/riscv32-esp-elf/bin:/new_home/.espressif/tools/esp32ulp-elf/2.28.51-esp-20191205/esp32ulp-elf-binutils/bin:/new_home/.espressif/tools/esp32s2ulp-elf/2.28.51-esp-20191205/esp32s2ulp-elf-binutils/bin:/new_home/.espressif/tools/openocd-esp32/v0.10.0-esp32-20210401/openocd-esp32/bin:/new_home/esp/esp-idf/tools:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
ENV LANG=C.UTF-8
RUN /bin/sh -c mkdir /module && chmod 777 /module && chmod -R 777 /new_home # buildkit
WORKDIR /module

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
