FROM osrf/ros:kinetic-desktop-full
 
RUN apt update
RUN apt upgrade -y

RUN apt update && apt install -y gdb git
RUN apt install -y ros-kinetic-joint-state-publisher-gui
RUN apt install -y git zip qtcreator cmake build-essential genromfs ninja-build 
RUN apt install -y protobuf-compiler libgoogle-glog-dev libeigen3-dev libxml2-utils
RUN apt install -y ros-kinetic-mav-comm ros-kinetic-joy
RUN apt install -y ros-kinetic-rqt-multiplot
RUN apt install -y gcc-arm-none-eabi
RUN apt install -y python3-pip

RUN apt install -y locales
RUN sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && \
    locale-gen
ENV LANG en_US.UTF-8  
ENV LANGUAGE en_US:en  
ENV LC_ALL en_US.UTF-8 

RUN apt install -y checkinstall libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev zlib1g-dev openssl libffi-dev python3-dev python3-setuptools wget
RUN apt install -y sdcc binutils usbutils libxcb-xinerama0
# # Python 3.7 install from sources
# RUN mkdir /tmp/Python37
# RUN mkdir /tmp/Python37/Python-3.7.16
# RUN cd /tmp/Python37
# RUN wget https://www.python.org/ftp/python/3.7.16/Python-3.7.16.tar.xz
# RUN tar xvf Python-3.7.16.tar.xz -C /tmp/Python37
# RUN cd /tmp/Python37/Python-3.7.16
# RUN /tmp/Python37/Python-3.7.16/configure --enable-optimizations
# RUN make altinstall
# RUN update-alternatives --install /usr/bin/python3 python3 /usr/local/bin/python3.7 1
# RUN ln -s /usr/share/pyshared/lsb_release.py /usr/local/lib/python3.8/site-packages/lsb_release.py

# Python 3.8 install from sources
RUN mkdir /tmp/Python38
RUN mkdir /tmp/Python38/Python-3.8.16
RUN cd /tmp/Python38
RUN wget https://www.python.org/ftp/python/3.8.16/Python-3.8.16.tar.xz
RUN tar xvf Python-3.8.16.tar.xz -C /tmp/Python38
RUN cd /tmp/Python38/Python-3.8.16
RUN /tmp/Python38/Python-3.8.16/configure --enable-optimizations
RUN make altinstall
RUN update-alternatives --install /usr/bin/python3 python3 /usr/local/bin/python3.8 1
RUN ln -s /usr/share/pyshared/lsb_release.py /usr/local/lib/python3.8/site-packages/lsb_release.py
# 

RUN pip3 install cfclient



# ################################################
# # bitcraze part   START
# ################################################
RUN dpkg --add-architecture i386 && apt-get update 
RUN apt install -y telnet libncurses5:i386 libusb-1.0-0 zip unzip sdcc libftdi-dev python3-pip python3-wheel python3-dev python3-setuptools 
RUN apt install -y rake swig flex bison gperf binutils-arm-none-eabi gcc-arm-none-eabi libnewlib-arm-none-eabi 
RUN apt install -y libstdc++-arm-none-eabi-newlib cmake ninja-build 
RUN rm -rf /var/lib/apt/lists/*
# Required environment for Zephyr to find the right libc
ENV SYSROOT_DIR /usr/lib/arm-none-eabi/newlib/

ENV DOCKER_VERSION 19.03.1
RUN curl -fsSLO https://download.docker.com/linux/static/stable/x86_64/docker-${DOCKER_VERSION}.tgz && tar --strip-components=1 -xvzf docker-${DOCKER_VERSION}.tgz -C /usr/local/bin

# When running on linux with a non root user, there is no HOME directory why it
# defaults to /. To make the behaviour uniform for all users create a new HOME
# for all users. We also have to make it read and writeable for everyone (done later)
RUN mkdir /new_home
ENV HOME=/new_home

# Upgrade pip to avoid need for wheel compiliation
RUN pip3 install --upgrade pip

RUN pip3 install scipy==1.9.2 flake8==3.8.4 pyusb==1.0.0b2 libusb-package==1.0.24.2 mock pyserial pre-commit tox pyelftools pytest west

# Make pre-commit download and prepare all tools for python testing
ADD ./bitcraze/.pre-commit-config.yaml /dummy/.pre-commit-config.yaml
#RUN cd /dummy && git init && pre-commit run && cd && rm -rf /dummy

# In order to build ESP-32 based projects we need the Espressif SDK and
# the build scripts need to know where to find it
RUN mkdir -p /new_home/esp

RUN cd /new_home/esp && git clone --depth 1 --branch v4.3.1 --recursive https://github.com/espressif/esp-idf.git
# install.sh does not exactly do what we want. Running parts of it...
RUN cd /new_home/esp/esp-idf && python3 ./tools/idf_tools.py install
ENV IDF_PATH=/new_home/esp/esp-idf
RUN cd /new_home/esp/esp-idf && pip3 install -r requirements.txt
# The export.sh script can not be sourced in docker, set it up manually
ENV PATH=/new_home/esp/esp-idf/components/esptool_py/esptool:/new_home/esp/esp-idf/components/espcoredump:/new_home/esp/esp-idf/components/partition_table:\
/new_home/esp/esp-idf/components/app_update:/new_home/.espressif/tools/xtensa-esp32-elf/esp-2021r1-8.4.0/xtensa-esp32-elf/bin:\
/new_home/.espressif/tools/xtensa-esp32s2-elf/esp-2021r1-8.4.0/xtensa-esp32s2-elf/bin:/new_home/.espressif/tools/xtensa-esp32s3-elf/esp-2021r1-8.4.0/xtensa-esp32s3-elf/bin:\
/new_home/.espressif/tools/riscv32-esp-elf/esp-2021r1-8.4.0/riscv32-esp-elf/bin:/new_home/.espressif/tools/esp32ulp-elf/2.28.51-esp-20191205/esp32ulp-elf-binutils/bin:\
/new_home/.espressif/tools/esp32s2ulp-elf/2.28.51-esp-20191205/esp32s2ulp-elf-binutils/bin:/new_home/.espressif/tools/openocd-esp32/v0.10.0-esp32-20210401/openocd-esp32/bin:\
/new_home/esp/esp-idf/tools:$PATH

# Set the locale to make ruby open text files as UTF-8 default
# (Encoding.default_external). Required to make html-proofer handle UTF-8.
ENV LANG C.UTF-8

# /module is used for releases when we check out code in the toolbelt container
# It is passed on to the builder with --volumes-from
# Make sure it is accessible for all users
RUN mkdir /module && chmod 777 /module && chmod -R 777 /new_home

# New version of git are more strict about the permissions of the project directory
# Disable this check
RUN git config --global --add safe.directory '*'

# WORKDIR /module

# ################################################
# # bitcraze part   END
# ################################################

RUN apt update && apt install -y udev

RUN touch /etc/udev/rules.d/99-bitcraze.rules
RUN echo '# Crazyradio (normal operation)' >> /etc/udev/rules.d/99-bitcraze.rules
RUN echo 'SUBSYSTEM=="usb", ATTRS{idVendor}=="1915", ATTRS{idProduct}=="7777", MODE="0664", GROUP="plugdev"' >> /etc/udev/rules.d/99-bitcraze.rules
RUN echo '# Bootloader' >> /etc/udev/rules.d/99-bitcraze.rules
RUN echo 'SUBSYSTEM=="usb", ATTRS{idVendor}=="1915", ATTRS{idProduct}=="0101", MODE="0664", GROUP="plugdev"' >> /etc/udev/rules.d/99-bitcraze.rules
RUN echo '# Crazyflie (over USB)' >> /etc/udev/rules.d/99-bitcraze.rules
RUN echo 'SUBSYSTEM=="usb", ATTRS{idVendor}=="0483", ATTRS{idProduct}=="5740", MODE="0664", GROUP="plugdev"' >> /etc/udev/rules.d/99-bitcraze.rules



RUN echo "source /opt/ros/kinetic/setup.bash" >> ~/.bashrc
RUN echo "source /home/valentin/catkin_ws/devel/setup.bash" >> ~/.bashrc
