FROM ubuntu:20.04

RUN apt update
RUN apt install -y udev usbutils
RUN apt upgrade -y


# CMD ["bash"]
# RUN set -eux; apt-get update
# RUN apt-get install -y --no-install-recommends  ca-certificates  curl  netbase  wget  tzdata 
# RUN set -ex;  if ! command -v gpg > /dev/null; then  apt-get update;  apt-get install -y --no-install-recommends   gnupg   dirmngr  ;  rm -rf /var/lib/apt/lists/*;  fi

# RUN apt-get install -y --no-install-recommends  git  mercurial  openssh-client  subversion   procps  
# # RUN  rm -rf /var/lib/apt/lists/*

# RUN apt-get install -y --no-install-recommends  autoconf  automake  bzip2  dpkg-dev  file  g++  gcc  imagemagick  libbz2-dev  libc6-dev  libcurl4-openssl-dev  libdb-dev  libevent-dev  libffi-dev  libgdbm-dev  libglib2.0-dev  libgmp-dev  libjpeg-dev  libkrb5-dev  liblzma-dev  libmagickcore-dev  libmagickwand-dev  libmaxminddb-dev  libncurses5-dev  libncursesw5-dev  libpng-dev  libpq-dev  libreadline-dev  libsqlite3-dev  libssl-dev  libtool  libwebp-dev  libxml2-dev  libxslt-dev  libyaml-dev  make  patch  unzip  xz-utils  zlib1g-dev   
# # $(   if apt-cache show 'default-libmysqlclient-dev' 2>/dev/null | grep -q '^Version:'; then   echo 'default-libmysqlclient-dev';   else   echo 'libmysqlclient-dev';   fi  )  ;  rm -rf /var/lib/apt/lists/*

# RUN dpkg --add-architecture i386 
# RUN apt-get install -y telnet  
# RUN apt-get install -y libncurses5
# RUN apt-get install -y libusb-1.0-0  zip unzip  sdcc libftdi-dev  python3-pip python3-wheel python3-dev python3-setuptools 
# # RUN apt-get install -y python-is-python3  
# RUN apt-get install -y rake  swig  flex bison gperf  
# # RUN apt-get install -y python3-opencv  
# RUN apt-get install -y binutils-arm-none-eabi  
# RUN apt-get install -y gcc-arm-none-eabi  
# RUN apt-get install -y libnewlib-arm-none-eabi  
# # RUN apt-get install -y picolibc-arm-none-eabi  
# RUN apt-get install -y libstdc++-arm-none-eabi-newlib  
# # RUN apt-get install -y libstdc++-arm-none-eabi-dev  
# RUN apt-get install -y cmake  ninja-build  
# # && rm -rf /var/lib/apt/lists/* # buildkit
# ENV SYSROOT_DIR=/usr/lib/arm-none-eabi/newlib/
# ENV DOCKER_VERSION=19.03.1
# RUN  curl -fsSLO https://download.docker.com/linux/static/stable/x86_64/docker-${DOCKER_VERSION}.tgz && tar --strip-components=1 -xvzf docker-${DOCKER_VERSION}.tgz -C /usr/local/bin # buildkit
# RUN  mkdir /new_home # buildkit
# ENV HOME=/new_home
# RUN  pip3 install --upgrade pip # buildkit
# # RUN  pip3 install scipy==1.9.2 
# # RUN  pip3 install flake8==3.8.4 
# # RUN  pip3 install pyusb==1.0.0b2 
# # RUN  pip3 install libusb-package==1.0.24.2 
# # RUN  pip3 install mock pyserial pre-commit tox pyelftools 
# # RUN  pip3 install pytest west
# ADD ./bitcraze/.pre-commit-config.yaml /dummy/.pre-commit-config.yaml # buildkit
# RUN  cd /dummy && git init && pre-commit run && cd && rm -rf /dummy # buildkit
# RUN  mkdir -p /new_home/esp # buildkit
# # RUN  cd /new_home/esp && git clone --depth 1 --branch v4.3.1 --recursive https://github.com/espressif/esp-idf.git # buildkit
# # RUN  cd /new_home/esp/esp-idf && python3 ./tools/idf_tools.py install # buildkit
# # ENV IDF_PATH=/new_home/esp/esp-idf
# # RUN  cd /new_home/esp/esp-idf && pip3 install -r requirements.txt # buildkit
# # ENV PATH=/new_home/esp/esp-idf/components/esptool_py/esptool:/new_home/esp/esp-idf/components/espcoredump:/new_home/esp/esp-idf/components/partition_table:/new_home/esp/esp-idf/components/app_update:/new_home/.espressif/tools/xtensa-esp32-elf/esp-2021r1-8.4.0/xtensa-esp32-elf/bin:/new_home/.espressif/tools/xtensa-esp32s2-elf/esp-2021r1-8.4.0/xtensa-esp32s2-elf/bin:/new_home/.espressif/tools/xtensa-esp32s3-elf/esp-2021r1-8.4.0/xtensa-esp32s3-elf/bin:/new_home/.espressif/tools/riscv32-esp-elf/esp-2021r1-8.4.0/riscv32-esp-elf/bin:/new_home/.espressif/tools/esp32ulp-elf/2.28.51-esp-20191205/esp32ulp-elf-binutils/bin:/new_home/.espressif/tools/esp32s2ulp-elf/2.28.51-esp-20191205/esp32s2ulp-elf-binutils/bin:/new_home/.espressif/tools/openocd-esp32/v0.10.0-esp32-20210401/openocd-esp32/bin:/new_home/esp/esp-idf/tools:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
# # ENV LANG=C.UTF-8
# # RUN  mkdir /module && chmod 777 /module && chmod -R 777 /new_home # buildkit
# # RUN  git config --global --add safe.directory '*' # buildkit


# WORKDIR /module








